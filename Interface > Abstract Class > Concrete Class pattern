https://stackoverflow.com/questions/19789590/interface-abstract-class-concrete-class-pattern
https://www.javaworld.com/article/2075627/core-java/maximize-flexibility-with-interfaces-and-abstract-classes.html?page=2
1. use interface as type polimorpysm and use abstractClass as code reuse. You could chose extend the abstract class and resue the common code
or you can directly implement the interface for your own implementation.

https://blogs.oracle.com/darcy/api-design:-interfaces-versus-abstract-classes
2. To summarize, an interface is generally the best way to define a type that permits multiple implementations
As discussed in that item, the ease of evolution of abstract classes comes from the ability to add new methods 
having "reasonable default implementations" without almost surely causing source of all existing subtypes to no longer compile
The two alternatives to be considered to define the initial desired type abstraction are:

Declare an interface.

Declare an abstract class, all of whose initial methods are public and abstract.

3. proxy
  http://docs.oracle.com/javase/6/docs/api/java/lang/reflect/Proxy.html
  An additional benefit of interfaces is the ability to use dynamic proxies; one notable use of dynamic proxies is creating
  the annotation objects returned at runtime by getAnnotation
  
4. inner interface
