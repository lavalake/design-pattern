https://www.linkedin.com/pulse/creational-design-patterns-android-5-builder-pattern-ahmed-iraki
Skip to main content
LinkedIn
Find People, Jobs, Companies, and MoreSearch for:
All
Keywords 
Search for people, jobs, companies, and more...
 SearchAdvanced
Inbox. You have 0 new messages. Inbox Menu
Notifications. You have 1 unseen notification. 1 Notifications Menu
Grow My Network 17 Grow My Network Menu.
jian wang Account & Settings Menu
Home Profile Profile Menu
My Network My Network Menu
Learning Jobs Interests Interests Menu
Business Services Business Services Menu
Try Premium for free

Creational Design Patterns in Android #5 - Builder Design Pattern

Published on October 1, 2016
LikeCreational Design Patterns in Android #5 - Builder Design Pattern2Comment1ShareShare Creational Design Patterns in Android #5 - Builder Design Pattern0
Ahmed Iraki
Ahmed Iraki
FollowAhmed Iraki
Senior Android Developer at OUSTA Technologies


Builder Pattern says that  "construct a complex object from simple objects using step-by-step approach"


There are three major issues with Factory and Abstract Factory design patterns when the Object contains a lot of attributes.

Too Many arguments to pass from client program to the Factory class that can be error prone because most of the time, the type of arguments are same and from client side its hard to maintain the order of the argument.
Some of the parameters might be optional but in Factory pattern, we are forced to send all the parameters and optional parameters need to send as NULL.
If the object is heavy and its creation is complex, then all that complexity will be part of Factory classes that is confusing.


How To solve the arguments issue !

We can solve the issues with large number of parameters by providing a constructor with required parameters and then different setter methods to set the optional parameters. The problem with this approach is that the Object state will be inconsistent until unless all the attributes are set explicitly.
Builder pattern solves the issue with large number of optional parameters and inconsistent state by providing a way to build the object step-by-step and provide a method that will actually return the final Object.


Advantage of Builder Design Pattern

The main advantages of Builder Pattern are as follows:

It provides clear separation between the construction and representation of an object.
It provides better control over construction process.
It supports to change the internal representation of objects.


Disadvantages

verbose and code duplication as Builder needs to copy all fields from Original or Item class.


Steps to implement Builder Pattern Example

First of all you need to create a static nested class and then copy all the arguments from the outer class to the Builder class. We should follow the naming convention and if the class name is Computer then builder class should be named as ComputerBuilder.
Java Builder class should have a public constructor with all the required attributes as parameters.
Java Builder class should have methods to set the optional parameters and it should return the same Builder object after setting the optional attribute.
The final step is to provide a build() method in the builder class that will return the Object needed by client program. For this we need to have a private constructor in the Class with Builder class as argument.


Builder Pattern Example

File : Computer.java

public class Computer {

	// required parameters
	private String HDD;
	private String RAM;
	// optional parameters
	private boolean isGraphicsCardEnabled;
	private boolean isBluetoothEnabled;

	public String getHDD() {
		return HDD;
	}

	public String getRAM() {
		return RAM;
	}

	public boolean isGraphicsCardEnabled() {
		return isGraphicsCardEnabled;
	}

	public boolean isBluetoothEnabled() {
		return isBluetoothEnabled;
	}

	private Computer(ComputerBuilder builder) {
		this.HDD = builder.HDD;
		this.RAM = builder.RAM;
		this.isGraphicsCardEnabled = builder.isGraphicsCardEnabled;
		this.isBluetoothEnabled = builder.isBluetoothEnabled;
	}

	// Builder Class
	public static class ComputerBuilder {
		// required parameters
		private String HDD;
		private String RAM;
		// optional parameters
		private boolean isGraphicsCardEnabled;
		private boolean isBluetoothEnabled;

		public ComputerBuilder(String hdd, String ram) {
			this.HDD = hdd;
			this.RAM = ram;
		}

		public ComputerBuilder setGraphicsCardEnabled( boolean isGraphicsCardEnabled) {
			this.isGraphicsCardEnabled = isGraphicsCardEnabled;
			return this;
		}

		public ComputerBuilder setBluetoothEnabled(boolean isBluetoothEnabled) {
			this.isBluetoothEnabled = isBluetoothEnabled;
			return this;
		}

		public Computer build() {
			return new Computer(this);
		}

	}

}



File : TestBuilderPattern.java

public class TestBuilderPattern {

	public static void main(String[] args) {
		// Using builder to get the object in a single line of code
		// and without any inconsistent state
		// or arguments management issues
		Computer comp = new Computer.ComputerBuilder("500 GB", "2 GB")
				.setBluetoothEnabled(true).setGraphicsCardEnabled(true).build();
	}

}




To Be Continued ...
LikeCreational Design Patterns in Android #5 - Builder Design PatternCommentShareShare Creational Design Patterns in Android #5 - Builder Design Pattern
Report this
FollowAhmed Iraki
Ahmed Iraki
Ahmed Iraki
Senior Android Developer at OUSTA Technologies
6 articles
1 commentRecommended


Leave your thoughts here…

3mo
Ahmed Iraki
Senior Android Developer at OUSTA Technologies
Other Creational Design Patterns Articles 
-Factory Method Design Pattern
https://www.linkedin.com/pulse/art-design-patterns-android-ahmed-iraki
-Abstract Factory Design Pattern 
https://www.linkedin.com/pulse/art-design-patterns-android-2-abstract-factory-ahmed-iraki… See more
LikeReply
Don't miss more articles by Ahmed Iraki


Creational Design Patterns in Android #6 - Object Pool Design Pattern
Ahmed Iraki on LinkedIn

Creational Design Patterns in Android #4 - Prototype Design Pattern
Ahmed Iraki on LinkedIn

Creational Design Patterns in Android #3 - Singleton Pattern
Ahmed Iraki on LinkedIn
Looking for more of the latest headlines on LinkedIn?

Discover more stories
Help Center About
Press
Blog
Developers
CareersAdvertisingTalent SolutionsSales SolutionsSmall BusinessMobileLanguage
Upgrade Your Account LinkedIn Corporation © 2017
User AgreementPrivacy PolicyAd ChoicesCommunity GuidelinesCookie PolicyCopyright PolicySend Feedback
